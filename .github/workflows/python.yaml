name: Python

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: astral-sh/ruff-action@v3
        with:
          src: api
      - run: ruff format
      - run: ruff check

  typing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: astral-sh/setup-uv@v5
      - run: uv run --project api mypy ./api

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: pre-commit/action@v3.0.1

  test:
    runs-on: ubuntu-latest
    needs: [ruff, typing, pre-commit]
    permissions:
      contents: write
      pull-requests: write
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: astral-sh/setup-uv@v5
      - run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup.sh
          sh rustup.sh -y
      - run: cd api && uv run maturin develop
      - run: cd api && DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test uv run python -m pytest --cov=api --cov-report=html --cov-report=term --cov-report=xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: api/htmlcov/
      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        if: github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ github.token }}
          COVERAGE_PATH: api/
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: api

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA }}
      - uses: google-github-actions/setup-gcloud@v2
      - run : gcloud auth configure-docker europe-west1-docker.pkg.dev
      - name: Generate image tag
        run: |
          TAG=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
      - name: Build, tag, and push docker image
        run: |
          docker build -t europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sport/api:${{ env.IMAGE_TAG }} api
          docker push europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sport/api:${{ env.IMAGE_TAG }}
      - uses: google-github-actions/deploy-cloudrun@v2
        with:
          region: europe-west1
          service: api
          image: europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sport/api:${{ env.IMAGE_TAG }}
